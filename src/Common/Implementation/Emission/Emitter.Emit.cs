using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using RestEase.Implementation.Analysis;
using RestEase.Platform;

namespace RestEase.Implementation.Emission
{
    internal class Emitter
    {
        private readonly ModuleBuilder moduleBuilder;

        public Emitter(ModuleBuilder moduleBuilder)
        {
            this.moduleBuilder = moduleBuilder;
        }

        public TypeEmitter EmitType(TypeModel type)
        {
            var typeBuilder = this.moduleBuilder.DefineType(CreateImplementationName(type.Type), TypeAttributes.Public | TypeAttributes.Sealed);
            typeBuilder.AddInterfaceImplementation(type.Type);

            return new TypeEmitter(typeBuilder, type);
        }

        private static string CreateImplementationName(Type interfaceType)
        {
            var sb = new StringBuilder();
            // Make this unspeakable, just in case...
            sb.Append("RestEase.AutoGenerated.<>");
            AddFriendlierNameForType(sb, interfaceType);
            return sb.ToString();
        }

        private static void AddFriendlierNameForType(StringBuilder sb, Type type)
        {
            var typeInfo = type.GetTypeInfo();
            if (typeInfo.IsGenericType)
            {
                sb.Append(type.GetGenericTypeDefinition().FullName.Replace('.', '+'));
                sb.Append("<>["); // Just so that they can't fool us with carefully-crafted interface names...
                foreach (var arg in typeInfo.GetGenericArguments())
                {
                    AddFriendlierNameForType(sb, arg);
                }
                sb.Append("]");
            }
            else
            {
                sb.Append(type.FullName.Replace('.', '+'));
            }
            sb.Append("<>").Append(typeInfo.Assembly.GetName().Name.Replace('.', '+'));
        }

    }
}